import pytest
import json
import logging as log

from hatching.hatching_result import extract_malware_families_from_hatching_sig


def test_extract_malware_families_from_hatching_sig():
    """Validate malware familty is extracted from the hatching API signature results"""

    # simplified view of hatching sig from static or dynamic triage report API results. .signatures key
    hatching_sig = {"name": "TestIt family", "score": 10, "tags": ["family:testit"]}

    mal_fams = extract_malware_families_from_hatching_sig(hatching_sig)
    assert mal_fams == ["testit"]

    # simplified view of hatching sig from static or dynamic triage report API results. .signatures key
    hatching_sig = {
        "name": "TestIt family",
        "score": 10,
        "tags": ["family:testit", "family:testit2", "upx"],
    }

    mal_fams = extract_malware_families_from_hatching_sig(hatching_sig)
    assert mal_fams == ["testit", "testit2"]


def test_invlalid_input():
    """Validate various invalid input scenarios return an empty list"""

    # Scenario 1
    hatching_sig = {}
    mal_fams = extract_malware_families_from_hatching_sig(hatching_sig)
    assert mal_fams == []

    hatching_sig = None
    mal_fams = extract_malware_families_from_hatching_sig(hatching_sig)
    assert mal_fams == []
